// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  password   String
  salt       String
  email      String       @unique @default("")
  freezed    Int          @default(0)
  avatar     String       @default("")
  desc       String       @default("")
  createTime DateTime     @default(dbgenerated("NOW()")) @map("create_time") @db.DateTime
  updateTime DateTime     @default(dbgenerated("NOW() ON UPDATE NOW() ")) @map("update_time") @db.Timestamp(0)
  roles      UserOnRole[]

  @@map("user")
}

model UserOnRole {
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  roleId     Int      @map("role_id")
  role       Role     @relation(fields: [roleId], references: [id])
  createTime DateTime @default(dbgenerated("NOW()")) @map("create_time") @db.DateTime
  updateTime DateTime @default(dbgenerated("NOW() ON UPDATE NOW() ")) @map("update_time") @db.Timestamp(0)

  @@id([userId, roleId])
  @@map("user_role")
}

model Role {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  desc       String             @default("")
  createTime DateTime           @default(dbgenerated("NOW()")) @map("create_time") @db.DateTime
  updateTime DateTime           @default(dbgenerated("NOW() ON UPDATE NOW() ")) @map("update_time") @db.Timestamp(0)
  users      UserOnRole[]
  permission RoleOnPermission[]

  @@map("role")
}

model RoleOnPermission {
  roleId       Int        @map("role_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int        @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permission")
}

model Permission {
  id            Int                @id @default(autoincrement())
  title         String
  code          String
  type          Int
  parentId      Int                @map("parent_id")
  createTime    DateTime           @default(dbgenerated("NOW()")) @map("create_time") @db.DateTime
  updateTime    DateTime           @default(dbgenerated("NOW() ON UPDATE NOW() ")) @map("update_time") @db.Timestamp(0)
  roles         RoleOnPermission[]
  permissionApi PermissionApi[]

  @@map("permission")
}

model PermissionApi {
  id           Int        @id @default(autoincrement())
  apiUrl       String     @map("api_url")
  apiMethod    String     @map("api_method")
  permissionId Int        @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])
  createTime   DateTime   @default(dbgenerated("NOW()")) @map("create_time") @db.DateTime
  updateTime   DateTime   @default(dbgenerated("NOW() ON UPDATE NOW() ")) @map("update_time") @db.Timestamp(0)

  @@map("permission_api")
}
